//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskManagerRemakeApp.Data
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using TaskManagerRemakeApp.Resources.Libraries;

    public partial class Task
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Task()
        {
            this.TaskUser = new HashSet<TaskUser>();
            this.TaskFile = new HashSet<TaskFile>();
        }
    
        public int Id { get; set; }
        public string Header { get; set; }
        public string Message { get; set; }
        public System.DateTime GetTime { get; set; }
        public System.DateTime EndTime { get; set; }
        public bool IsComplete { get; set; }
        public string Report { get; set; }
        public bool IsCancelled { get; set; }
        public bool IsReadyToCheck { get; set; }
        public bool IsReturned { get; set; }
        public string AdminReport { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TaskUser> TaskUser { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TaskFile> TaskFile { get; set; }

        public Status CurrentStatus
        {
            get
            {
                if (IsComplete == false && IsReadyToCheck == false && EndTime >= DateTime.Today && IsCancelled == false)
                    return Status.InWork;
                if (IsComplete == false && IsReadyToCheck && IsCancelled == false)
                    return Status.OnCheck;
                if (IsComplete == false && IsReadyToCheck == false && EndTime < DateTime.Today && IsCancelled == false)
                    return Status.Fired;
                if (IsComplete && IsReadyToCheck == false && IsCancelled == false)
                    return Status.Completed;
                if (IsComplete && IsReadyToCheck && IsCancelled == false)
                    return Status.Rejected;
                if (IsCancelled)
                    return Status.Cancelled;
                return Status.Undefinded;
            }
        }

        public string DateIntervalShort
        {
            get
            {
                return GetTime.ToString("dd.MM") + " - " + EndTime.ToString("dd.MM");
            }
        }

        public byte[] ResponsiblePhotoOrDefault
        {
            get
            {
                var taskUserUser = TaskUser.First(x => x.TaskId.Equals(Id) && !x.IsReadOnly).User;
                if (taskUserUser != null)
                    return taskUserUser.PhotoOrDefault;
                else
                    return TaskDbEntities.NewContext.TaskUser.First(x => x.TaskId.Equals(Id) && !x.IsReadOnly).User.PhotoOrDefault;
            }
        }

        public string ResponsibleName
        {
            get
            {
                var taskUserUser = TaskUser.First(x => x.TaskId.Equals(Id) && !x.IsReadOnly).User;
                if (taskUserUser != null)
                    return taskUserUser.Username;
                else
                    return TaskDbEntities.NewContext.TaskUser.First(x => x.TaskId.Equals(Id) && !x.IsReadOnly).User.Username;
            }
        }

        public User Responsible
        {
            get
            {
                var taskUserUser = TaskUser.First(x => x.TaskId.Equals(Id) && !x.IsReadOnly).User;
                if (taskUserUser != null)
                    return taskUserUser;
                else
                    return TaskDbEntities.NewContext.TaskUser.First(x => x.TaskId.Equals(Id) && !x.IsReadOnly).User;
            }
        }

        public List<User> UsersList
        {
            get
            {
                var taskUsers = TaskUser.Where(x => x.TaskId.Equals(Id));
                if (taskUsers.First().User == null)
                    taskUsers = TaskDbEntities.NewContext.TaskUser.Where(x => x.TaskId.Equals(Id));
                var users = new List<User>();
                foreach (var taskUser in taskUsers)
                    users.Add(taskUser.User);
                users.Sort(new UserComparer());
                return users;
            }
        }
    }
}
