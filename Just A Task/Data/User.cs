//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskManagerRemakeApp.Data
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Windows.Media.Imaging;

    public partial class User
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public User()
        {
            this.TaskUser = new HashSet<TaskUser>();
        }
    
        public int Id { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public bool IsAdmin { get; set; }
        public byte[] Photo { get; set; }
        public string Email { get; set; }
        public bool CanAddTask { get; set; }
        public bool CanChangeUsers { get; set; }
        public string TelegramUserId { get; set; }
        public Nullable<int> DepartamentId { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TaskUser> TaskUser { get; set; }
        public virtual Departament Departament { get; set; }

        public byte[] PhotoOrDefault
        {
            get
            {
                if (this.Photo == null)
                {
                    byte[] photo;
                    var bitmapImage = new BitmapImage(new Uri("pack://application:,,,/Resources/Images/defaultUserIcon.png"));
                    PngBitmapEncoder encoder = new PngBitmapEncoder();
                    encoder.Frames.Add(BitmapFrame.Create(bitmapImage));
                    using (MemoryStream ms = new MemoryStream())
                    {
                        encoder.Save(ms);
                        photo = ms.ToArray();
                    }
                    return photo;
                }
                else { return this.Photo; }
            }
        }

        public string ShortUsername
        {
            get
            {
                var nameSurname = Username.Split(' ');
                return nameSurname[0] + " " + nameSurname[1].Remove(1).Insert(1, ".");
            }
        }

        public string DepartamentName
        {
            get
            {
                return DepartamentId == null ? "Без отдела" : Departament.Name;
            }
        }

        public override string ToString() => Username;
    }
}
